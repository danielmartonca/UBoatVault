{
  "properties": [
    {
      "name": "uboat.pretty-print-logs",
      "type": "java.lang.String",
      "description": "Set to true if the app should print objects formatted with spaces and multiple lines."
    },
    {
      "name": "uboat.journey.max-active-seconds",
      "type": "java.lang.String",
      "description": "Describes how many seconds are allowed by an sailor to not give any update of his position(pulse) for clients to request a journey to him."
    },
    {
      "name": "uboat.journey.max-active-sailors",
      "type": "java.lang.String",
      "description": "Describes how many sailors can be retrieved when requesting a new journey. The closest [max-active-sailors] will be retrieved."
    },
    {
      "name": "uboat.journey.max-accepted-distance",
      "type": "java.lang.String",
      "description": "Describes the maximum distance in meters allowed between the sailor and the client when before creating new Journeys."
    },
    {
      "name": "uboat.journey.inactivityTimeoutSeconds",
      "type": "java.lang.Integer",
      "description": "Describes the maximum amount of seconds allowed for an entity to not respond during a ongoing Journey."
    },
    {
      "name": "uboat.journey.metersDistanceForCloseConsideration",
      "type": "java.lang.Integer",
      "description": "Describes the maximum amount of distance (expressed in meters) for two LatLng coordinates to be considered near each other."
    },
    {
      "name": "uboat.journey.recordAllLocationData",
      "type": "java.lang.Boolean",
      "description": "If this flag is set to true, every location data sent with the sail API will be stored in the database. If this flag is set to false, the current position will be recorded."
    },
    {
      "name": "uboat.apis-body-not-logged",
      "type": "java.util.Arrays",
      "description": "List of APIs for which the body will not be logged. Most useful when APIs return bytes."
    },
    {
      "name": "uboat.schedulersCron.clientScheduler.deleteInactiveInitiatedJourneys",
      "type": "java.lang.String",
      "description": "Cron schedule format for deleteInactiveInitiatedJourneys task."
    },
    {
      "name": "uboat.schedulersCron.clientScheduler.initiatedJourneyExpirationSeconds",
      "type": "java.lang.String",
      "description": "Every journey in INITIATED state will be deleted from the database if more than initiatedJourneyExpirationSeconds have passed since its dateInitiated."
    },
    {
      "name": "uboat.schedulersCron.sailorScheduler.assertSailorsAreActive",
      "type": "java.lang.String",
      "description": "Cron schedule format for assertSailorsAreActive task."
    },
    {
      "name": "uboat.schedulersCron.journeyScheduler.removeJourneysNotConfirmed",
      "type": "java.lang.String",
      "description": "Cron schedule format for removeJourneysNotConfirmed task."
    },
    {
      "name": "uboat.schedulersCron.journeyScheduler.journeysNotConfirmedTimeoutSeconds",
      "type": "java.lang.Integer",
      "description": "After how many seconds should the journey not confirmed be considered expired."
    },
    {
      "name": "uboat.schedulersCron.journeyScheduler.checkNoActivityJourneys",
      "type": "java.lang.String",
      "description": "Cron schedule format for checkNoActivityJourneys task."
    },
    {
      "name": "uboat.schedulersCron.journeyScheduler.completePayedJourneys",
      "type": "java.lang.String",
      "description": "Cron schedule format for completePayedJourneys task."
    },
    {
      "name": "uboat.schedulersCron.journeyScheduler.checkNoActivityJourneysTimeoutSeconds",
      "type": "java.lang.Integer",
      "description": "After how many seconds should the journey which was started be considered expired therefore moved to IN_ERROR state."
    },
    {
      "name": "uboat.security.jwtEncryptionKey",
      "type": "java.lang.String",
      "description": "Private key used in the creation of JWT."
    },
    {
      "name": "uboat.security.encryption.password",
      "type": "java.lang.String",
      "description": "Private key used for encrypting credentials."
    },
    {
      "name": "uboat.security.encryption.algorithm",
      "type": "java.lang.String",
      "description": "Encryption algorithm used for encrypting credentials."
    },
    {
      "name": "uboat.security.stripe_public_key",
      "type": "java.lang.String",
      "description": "Public key used to call Stripe APIs."
    },
    {
      "name": "uboat.security.twilio_account_sid",
      "type": "java.lang.String",
      "description": "Used by the Twilio service."
    },
    {
      "name": "uboat.security.twilio_token",
      "type": "java.lang.String",
      "description": "Used by the Twilio service."
    },{
      "name": "uboat.security.twilio_UBoat_phone_number",
      "type": "java.lang.String",
      "description": "Used by the Twilio service."
    },
    {
      "name": "uboat.security.stripe_private_key",
      "type": "java.lang.String",
      "description": "Private key used to call Stripe APIs."
    },
    {
      "name": "whitelist",
      "type": "java.util.Arrays",
      "description": "List of ant patterns that don't require authorization header."
    },
    {
      "name": "client-blacklist",
      "type": "java.util.Arrays",
      "description": "List of ant patterns for which the UBoat Client does not have access."
    },
    {
      "name": "sailor-blacklist",
      "type": "java.util.Arrays",
      "description": "List of ant patterns for which the UBoat Sailor does not have access."
    },
    {
      "name": "uboat.regex.phone",
      "type": "java.lang.String",
      "description": "Regex for Phone number."
    },
    {
      "name": "uboat.regex.username",
      "type": "java.lang.String",
      "description": "Regex for username."
    },
    {
      "name": "uboat.regex.email",
      "type": "java.lang.String",
      "description": "Regex for emails."
    },
    {
      "name": "uboat.regex.password",
      "type": "java.lang.String",
      "description": "Regex for passwords."
    }
  ]
}